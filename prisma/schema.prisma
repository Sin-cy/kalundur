// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// *** NOTE: Everytime we change prisma schema and run npx prisma db push. Always restart DEV Server ***

generator client {
  provider = "prisma-client-js"
}

datasource db {
    provider      = "postgresql"
    url           = env("DATABASE_URL")
    directUrl     = env("DIRECT_URL")
}

// NOTE: model is basically a table in Prisma
// Its always an uppercase when creating a model
model User {
  id            String          @id @default(cuid())
  name          String?
  // the String? for usrname is important
  // this tells prisma that when ever we create a username, it does not have to be defined at the start
  // or like we dont need the initial render
  // also the username must be @unique for each user 
  userName      String?         @unique
  // added grantId and Email for Nylas authentications
  grantId       String?         
  grantEmail    String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  availability  Availability[]
  eventType     EventType[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
// Protect our dashboard and check if the session is still valid
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

// **** Table for Availability Route 
model Availability {
    id          String      @id @default(uuid()) 

    day         Day
    fromTime    String
    tillTime    String
    isActive    Boolean     @default(true)

    createdAt   DateTime    @default(now()) 
    updatedAt   DateTime    @updatedAt
    User        User?       @relation(fields: [userId] , references: [id] )
    userId      String?
}

enum Day {
    Monday
    Tuesday
    Wednesday
    Thursday
    Friday
    Saturday
    Sunday
}
// ****

model EventType {
    id              String      @id @default(uuid())
    title           String
    duration        Int
    url             String
    description     String
    active          Boolean     @default(true)
    videoCallSoftware       String      @default("Google Meet") 

    createdAt       DateTime    @default(now())
    User            User?       @relation(fields: [userId], references: [id] )
    userId          String?     
}
 
// NOTE: Always db push Prisma to our db when this file is changed
// To Sync our Prisma schema with the Supabase table, we need to run the command `npx prisma db push`
// this syncs our Supabase database (postgresql) with Prisma Schema 
